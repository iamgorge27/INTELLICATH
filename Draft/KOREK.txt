#include <HX711.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <EEPROM.h>

#define DT 4
#define SCK 16
HX711 scale;

const char* ssid = "Pldt"; 
const char* password = "Ladoysot567890!"; 
const char* serverURL = "https://192.168.1.6:5001/predict-post";  

float calibration_factor = 457; 
const int max_catheter_bag_volume = 1000;
float offset = 412;
int catheter_bag_volume = 0; 
int urine_output = 0;
int starting_catheter_bag_volume = 0;  // Fix: Reference point for urine output tracking
int remaining_volume = 0;
unsigned long last_update_time = 0;
unsigned long hour_interval = 360000;  

int eeprom_start_address = 0;

void setup() {
  Serial.begin(9600);
  Serial.println("Initializing load cell...");
  scale.begin(DT, SCK);
  scale.set_scale(calibration_factor);
  Serial.println("Load cell initialized.");

  EEPROM.begin(512);
  catheter_bag_volume = readEEPROM(eeprom_start_address);
  urine_output = readEEPROM(eeprom_start_address + 4);
  starting_catheter_bag_volume = readEEPROM(eeprom_start_address + 8);

  // Ensure values are valid
  if (catheter_bag_volume < 0 || catheter_bag_volume > max_catheter_bag_volume) catheter_bag_volume = 0;
  if (urine_output < 0) urine_output = 0;
  if (starting_catheter_bag_volume < 0 || starting_catheter_bag_volume > max_catheter_bag_volume) {
      starting_catheter_bag_volume = catheter_bag_volume;  // Fix improper resetting
  }

  Serial.println("Last catheter bag volume from EEPROM: " + String(catheter_bag_volume));
  Serial.println("Last urine output from EEPROM: " + String(urine_output));
  Serial.println("Last starting catheter bag volume from EEPROM: " + String(starting_catheter_bag_volume));

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("WiFi is connected.");
    int current_bag_volume = scale.get_units(10) - offset;
    if (current_bag_volume < 0) current_bag_volume = 0;
    Serial.println("Current catheter bag volume: " + String(current_bag_volume));

    // Urine Output Calculation - FIXED
    urine_output = current_bag_volume - starting_catheter_bag_volume;
    if (urine_output < 0) urine_output = 0;  // Prevent negative values

    catheter_bag_volume = current_bag_volume;  // Always update latest volume
    remaining_volume = max_catheter_bag_volume - catheter_bag_volume; // Update remaining volume

    // Save values correctly
    saveToEEPROM(eeprom_start_address, catheter_bag_volume);
    saveToEEPROM(eeprom_start_address + 4, urine_output);
    saveToEEPROM(eeprom_start_address + 8, starting_catheter_bag_volume);

    float urine_flow_rate = urine_output / 60.0;
    if (urine_flow_rate < 0) urine_flow_rate = 0;
    sendDataToServer(urine_output, urine_flow_rate, catheter_bag_volume, remaining_volume);

    // Reset urine output every hour
    if (millis() - last_update_time >= hour_interval) {
        saveToEEPROM(eeprom_start_address + 4, urine_output);  // Save last known urine output
        urine_output = 0;  

        starting_catheter_bag_volume = catheter_bag_volume; // Update reference for next cycle
        saveToEEPROM(eeprom_start_address + 4, urine_output);  
        saveToEEPROM(eeprom_start_address + 8, starting_catheter_bag_volume);

        last_update_time = millis();  
    }

  } else {
    Serial.println("WiFi Disconnected. Reconnecting...");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
    }
    Serial.println("Reconnected to WiFi");
  }

  delay(1000); 
}

void sendDataToServer(int urine_output, float urine_flow_rate, int catheter_bag_volume, int remaining_volume) {
  String jsonPayload = "{";
  jsonPayload += "\"urine_output\":" + String(urine_output) + ","; 
  jsonPayload += "\"urine_flow_rate\":" + String(urine_flow_rate, 2) + ","; 
  jsonPayload += "\"catheter_bag_volume\":" + String(catheter_bag_volume) + ","; 
  jsonPayload += "\"remaining_volume\":" + String(remaining_volume);
  jsonPayload += "}";

  Serial.println("Sending Data: " + jsonPayload);

  HTTPClient http;
  http.begin(serverURL);
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST(jsonPayload);
  if (httpResponseCode > 0) {
    Serial.println("HTTP Response code: " + String(httpResponseCode));
    String response = http.getString();
    Serial.println("Response: " + response);
  } else {
    Serial.println("Error sending data: " + String(httpResponseCode));
  }
  http.end();
}

void saveToEEPROM(int address, int value) {
  EEPROM.write(address, (int)(value >> 8)); 
  EEPROM.write(address + 1, (int)(value & 0xFF)); 
  EEPROM.commit();
}

int readEEPROM(int address) {
  int highByte = EEPROM.read(address);
  int lowByte = EEPROM.read(address + 1);
  return (highByte << 8) + lowByte;
}
